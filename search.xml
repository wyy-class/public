<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>最长公共序列</title>
      <link href="/public/2020/09/02/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%BA%8F%E5%88%97/"/>
      <url>/public/2020/09/02/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%BA%8F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h3 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h3><p>   动态规划 </p><pre><code>import java.util.Scanner;public class LCS {    public static void main(String[] args) {        Scanner scanner = new Scanner(System.in);        String s1=scanner.nextLine();        s1=&quot;0&quot;+s1;//为了避免dp数组越界        String s2=scanner.nextLine();        s2=&quot;0&quot;+s2;        int[][] dp=new int[s1.length()][s2.length()];        int[][] b=new int[s1.length()][s2.length()];//为了构造最优解        lcg(s1, s2, dp,b, s1.length()-1, s2.length()-1);        for(int i=0;i&lt;s1.length();i++){            for(int j=0;j&lt;s2.length();j++){                System.out.print(dp[i][j]);            }            System.out.println();        }        System.out.println();        for(int i=0;i&lt;s1.length();i++){            for(int j=0;j&lt;s2.length();j++){                System.out.print(b[i][j]);            }            System.out.println();        }       print(b, s1, s1.length()-1, s2.length()-1);    }    //最优子结构等式    public static void lcg(String s1,String s2,int[][] dp,int[][] b,int n,int m){        for(int i=1;i&lt;=n;i++){            for(int j=1;j&lt;=m;j++){                if(s1.charAt(i)==s2.charAt(j)){                    dp[i][j]=dp[i-1][j-1]+1;                    b[i][j]=1;                }                else{                    if(dp[i-1][j]&gt;dp[i][j-1]){                        dp[i][j]=dp[i-1][j];                        b[i][j]=2;                    }                    else{                        dp[i][j]=dp[i][j-1];                        b[i][j]=3;                    }                }            }        }    }//构造最优解    public static void print(int[][] b,String s1,int i,int j){        if(i==0||j==0) return;        if(b[i][j]==1){            System.out.println(s1.charAt(i));            print(b, s1, i-1, j-1);        }        else if(b[i][j]==2){            print(b, s1, i-1, j);        }        else{            print(b, s1, i, j-1);        }    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>验证码生成工具</title>
      <link href="/public/2020/09/02/0_1%E8%83%8C%E5%8C%85/"/>
      <url>/public/2020/09/02/0_1%E8%83%8C%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="二位数组解析0—1背包问题"><a href="#二位数组解析0—1背包问题" class="headerlink" title="二位数组解析0—1背包问题"></a>二位数组解析0—1背包问题</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class BeiBao &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Scanner sc&#x3D;new Scanner(System.in);</span><br><span class="line">        int n&#x3D;sc.nextInt();&#x2F;&#x2F;物品个数</span><br><span class="line">        int m&#x3D;sc.nextInt();&#x2F;&#x2F;背包容量</span><br><span class="line">        int[][] dp&#x3D;new int[n+1][m+1];</span><br><span class="line">        int[] v&#x3D;new int[n+1];&#x2F;&#x2F;各物品地价值</span><br><span class="line">        int[] w&#x3D;new int[n+1];&#x2F;&#x2F;各物品地重量</span><br><span class="line">        for(int i&#x3D;1;i&lt;&#x3D;n;i++)&#123;</span><br><span class="line">            w[i]&#x3D;sc.nextInt();</span><br><span class="line">            v[i]&#x3D;sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        p(dp, v, w, n, m);</span><br><span class="line"></span><br><span class="line">        for(int i&#x3D;0;i&lt;&#x3D;n;i++)&#123;</span><br><span class="line">            for(int j&#x3D;0;j&lt;&#x3D;m;j++)&#123;</span><br><span class="line">                System.out.print(dp[i][j]+&quot; &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        print(dp, w, v, n, m);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#x2F;&#x2F; 最优子结构等式</span><br><span class="line">    public static void p(int[][] dp,int[] v,int[] w,int n,int m)&#123;</span><br><span class="line">        for(int i&#x3D;1;i&lt;&#x3D;n;i++)&#123;</span><br><span class="line">            for(int j&#x3D;1;j&lt;&#x3D;m;j++)&#123;</span><br><span class="line">                if(w[i]&lt;&#x3D;j)&#123;</span><br><span class="line">                    dp[i][j]&#x3D;Math.max(dp[i-1][j-w[i]]+v[i], dp[i-1][j]);</span><br><span class="line">                &#125;</span><br><span class="line">                else&#123;</span><br><span class="line">                    dp[i][j]&#x3D;dp[i-1][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;构造最优解 </span><br><span class="line">    public static void print(int[][] dp,int[] w,int[] v,int i,int j)&#123;</span><br><span class="line">        if(i&#x3D;&#x3D;0||j&#x3D;&#x3D;0) return;</span><br><span class="line">        if(dp[i][j]&#x3D;&#x3D;dp[i-1][j])&#123;</span><br><span class="line">            print(dp, w,v, i-1, j);</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            System.out.println(w[i]+&quot; &quot;+v[i]);</span><br><span class="line">            print(dp, w, v, i-1, j-w[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96; </span><br><span class="line"># 测试样例</span><br></pre></td></tr></table></figure><p>4 8</p><p>2 3<br>4 5<br>4 6<br>1 5<br>0 0 0 0 0 0 0 0 0<br>0 0 3 3 3 3 3 3 3<br>0 0 3 3 5 5 8 8 8<br>0 0 3 3 6 6 9 9 11<br>0 5 5 8 8 11 11 14 14</p><p>1 5<br>4 6<br>2 3</p><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据加密，解密</title>
      <link href="/public/2020/07/13/%E5%8A%A0%E5%AF%86_%E8%A7%A3%E5%AF%86/"/>
      <url>/public/2020/07/13/%E5%8A%A0%E5%AF%86_%E8%A7%A3%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<p>以下只是自己的突发奇想，如果有什么好的想法，可以联系我。。。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">import java.math.BigInteger;</span><br><span class="line"></span><br><span class="line">public class Demo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">String str&#x3D;&quot;245abcdksl&quot;;</span><br><span class="line">BigInteger n&#x3D;encyp(str);</span><br><span class="line">String s&#x3D;decode(n);</span><br><span class="line">System.out.println(n+&quot; &quot;+s);</span><br><span class="line">&#125;</span><br><span class="line">public static BigInteger encyp(String s) &#123;</span><br><span class="line">BigInteger n&#x3D;BigInteger.ZERO;</span><br><span class="line">for(int i&#x3D;0;i&lt;s.length();i++) &#123;</span><br><span class="line">&#x2F;&#x2F;n&#x3D;n*256+s.charAt(i);</span><br><span class="line">n&#x3D;n.multiply(BigInteger.valueOf(256)).add(BigInteger.valueOf(s.charAt(i)));</span><br><span class="line">&#125;</span><br><span class="line">return n;</span><br><span class="line">&#125;</span><br><span class="line">public static String decode(BigInteger n) &#123;</span><br><span class="line">StringBuilder sb&#x3D;new StringBuilder();</span><br><span class="line">while(n.compareTo(BigInteger.ZERO)&#x3D;&#x3D;1) &#123;</span><br><span class="line">for(int i&#x3D;0;i&lt;256;i++) &#123;</span><br><span class="line">&#x2F;&#x2F;if((n-i)%256&#x3D;&#x3D;0) &#123;</span><br><span class="line">&#x2F;&#x2F;sb.append((char)i);</span><br><span class="line">&#x2F;&#x2F;n&#x3D;n-i;</span><br><span class="line">&#x2F;&#x2F;n&#x3D;n&#x2F;256;</span><br><span class="line">&#x2F;&#x2F;break;</span><br><span class="line">&#x2F;&#x2F;&#125;</span><br><span class="line">if((n.subtract(BigInteger.valueOf(i))).mod(BigInteger.valueOf(256)).equals(BigInteger.ZERO)) &#123;</span><br><span class="line">sb.append((char)i);</span><br><span class="line">n&#x3D;n.subtract(BigInteger.valueOf(i));</span><br><span class="line">n&#x3D;n.divide(BigInteger.valueOf(256));</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return sb.reverse().toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>验证码生成工具</title>
      <link href="/public/2020/07/11/%E9%AA%8C%E8%AF%81%E7%A0%81%E7%94%9F%E6%88%90/"/>
      <url>/public/2020/07/11/%E9%AA%8C%E8%AF%81%E7%A0%81%E7%94%9F%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h1 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h1><p>  地址为”/checkCodeServlet”</p><pre><code>package servlet;import java.awt.Color;import java.awt.Font;import java.awt.Graphics;import java.awt.image.BufferedImage;import java.io.IOException;import java.util.Date;import java.util.Random;import javax.imageio.ImageIO;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;@WebServlet(&quot;/checkCodeServlet&quot;)public class CheckCodeServlet extends HttpServlet {    private static final long serialVersionUID = 1L;    private static final char[] CH = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890&quot;.toCharArray();    private static final int IMAGE_WIDTH = 73;    private static final int IMAGE_HEIGHT = 28;    private static final int LINE_NUM = 30;    private static final int RANDOM_NUM = 4;    Random random = new Random();    @Override    protected void doGet(HttpServletRequest request, HttpServletResponse response)            throws ServletException, IOException {        response.setContentType(&quot;image/jpg&quot;);//设置相应类型,告诉浏览器输出的内容为图片        response.setHeader(&quot;Pragma&quot;, &quot;No-cache&quot;);//设置响应头信息，告诉浏览器不要缓存此内容        response.setHeader(&quot;Cache-Control&quot;, &quot;no-cache&quot;);        response.setDateHeader(&quot;Expire&quot;, new Date().getTime());        BufferedImage bi = new BufferedImage(IMAGE_WIDTH, IMAGE_HEIGHT, BufferedImage.TYPE_INT_BGR);        Graphics g = bi.getGraphics();        g.fillRect(0, 0, IMAGE_WIDTH, IMAGE_HEIGHT);        g.setColor(getRandomColor(110, 133));        g.setFont(new Font(&quot;Times New Roman&quot;, Font.ROMAN_BASELINE, 18));        // 绘制干扰线        for (int i = 1; i &lt;= LINE_NUM; i++) {            int x = random.nextInt(IMAGE_WIDTH);            int y = random.nextInt(IMAGE_HEIGHT);            int xl = random.nextInt(13);            int yl = random.nextInt(15);            g.drawLine(x, y, x + xl, y + yl);        }        // 绘制随机字符        StringBuilder sb = new StringBuilder();        String str = null;        for (int i = 0; i &lt; RANDOM_NUM; i++) {            g.setFont(new Font(&quot;Fixedsys&quot;, Font.CENTER_BASELINE, 18));            g.setColor(new Color(random.nextInt(101), random.nextInt(111), random.nextInt(121)));            str = CH[random.nextInt(CH.length)] + &quot;&quot;;            g.drawString(str, 13 * i, 16);            g.translate(random.nextInt(3), random.nextInt(3));            sb.append(str);        }        g.dispose();        request.getSession().setAttribute(&quot;checkCode&quot;, sb.toString());        ImageIO.write(bi, &quot;JPG&quot;, response.getOutputStream());    }    @Override    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {       this.doGet(req,resp);    }    /**     * 获得颜色     */    private Color getRandomColor(int fc, int bc) {        if (fc &gt; 255)            fc = 255;        if (bc &gt; 255)            bc = 255;        int r = fc + random.nextInt(bc - fc - 16);        int g = fc + random.nextInt(bc - fc - 14);        int b = fc + random.nextInt(bc - fc - 18);        return new Color(r, g, b);    }}                  </code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具类 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>归并排序算法</title>
      <link href="/public/2020/07/09/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
      <url>/public/2020/07/09/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h3><p> 分治思想 归并思想</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">// 归并排序</span><br><span class="line">  public static int[] mergeSort(int[] array) &#123;</span><br><span class="line">    // 为了方便查看结果，我们将每个数组进行打印</span><br><span class="line">    <span class="keyword">if</span> (array.length == 1) &#123;</span><br><span class="line">      <span class="built_in">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int middle = array.length / 2;</span><br><span class="line">    // 处理 0 到 middle 左侧数组部分</span><br><span class="line">    int[] left = mergeSort(subArray(array, 0, middle));</span><br><span class="line">    // 处理 middle 到 array.length 右侧数组部分</span><br><span class="line">    int[] right = mergeSort(subArray(array, middle, array.length));</span><br><span class="line"></span><br><span class="line">    // TODO处理合并问题</span><br><span class="line">    p(array,left,right);</span><br><span class="line">    <span class="built_in">return</span> array;</span><br><span class="line">  &#125;</span><br><span class="line">  public static void p(int[] array,int[] left,int[] right)&#123;</span><br><span class="line">    int l=0;</span><br><span class="line">    int r=0;</span><br><span class="line">    int k=0;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;left.length&amp;&amp;r&lt;right.length)&#123;</span><br><span class="line">    <span class="keyword">if</span>(left[l]&lt;right[r])&#123;</span><br><span class="line">      array[k]=left[l];</span><br><span class="line">      l++;</span><br><span class="line">      k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      array[k]=right[r];</span><br><span class="line">      r++;</span><br><span class="line">      k++;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;left.length)&#123;</span><br><span class="line">       <span class="keyword">for</span>(int i=l;i&lt;left.length;i++)&#123;</span><br><span class="line">       array[k]=left[i];</span><br><span class="line">       k++;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r&lt;right.length)&#123;</span><br><span class="line">      <span class="keyword">for</span>(int i=r;i&lt;right.length;i++)&#123;</span><br><span class="line">       array[k]=right[i];</span><br><span class="line">       k++;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 拷贝原数组的部分内容，从 left 到 right</span><br><span class="line">  public static int[] subArray(int[] <span class="built_in">source</span>, int left, int right) &#123;</span><br><span class="line">    // 创建一个新数组</span><br><span class="line">    int[] result = new int[right - left];</span><br><span class="line">    // 依次赋值进去</span><br><span class="line">    <span class="keyword">for</span> (int i = left; i &lt; right; i++) &#123;</span><br><span class="line">      result[i - left] = <span class="built_in">source</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> result;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 排序算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>快速排序算法</title>
      <link href="/public/2020/07/09/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
      <url>/public/2020/07/09/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h3><p> 分治思想 划分思想</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">public static void quickSort(int[] array) &#123;</span><br><span class="line">    // 调用快速排序的核心，传入left，right</span><br><span class="line">    quickSortCore(array, 0, array.length - 1);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 快速排序的核心，同样也是递归函数</span><br><span class="line">  public static void quickSortCore(int[] array, int left, int right) &#123;</span><br><span class="line">    // 递归基准条件，left &gt;= right 即表示数组只有1个或者0个元素。</span><br><span class="line">    <span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">      <span class="built_in">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    // 根据轴分区</span><br><span class="line">    int pivotIndex = partition(array, left, right);</span><br><span class="line"></span><br><span class="line">    // 递归调用左侧和右侧数组分区</span><br><span class="line">    quickSortCore(array, left, pivotIndex - 1);</span><br><span class="line">    quickSortCore(array, pivotIndex + 1, right);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 对数组进行分区，并返回当前轴所在的位置</span><br><span class="line">  public static int partition(int[] array, int left, int right) &#123;</span><br><span class="line">    int temp=array[left];</span><br><span class="line">    int m=left;</span><br><span class="line">     left=left+1;</span><br><span class="line">     int t=0;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">      <span class="keyword">while</span>(array[left]&lt;=temp&amp;&amp;left&lt;right)&#123;</span><br><span class="line">        left++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span>(array[right]&gt;=temp&amp;&amp;left&lt;right)&#123;</span><br><span class="line">        right--;</span><br><span class="line">      &#125;</span><br><span class="line">      t=array[left];</span><br><span class="line">      array[left]=array[right];</span><br><span class="line">      array[right]=t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(array[left]&gt;temp)&#123;</span><br><span class="line">      left--;</span><br><span class="line">    &#125;</span><br><span class="line">    t=array[left];</span><br><span class="line">    array[left]=array[m];</span><br><span class="line">    array[m]=t;</span><br><span class="line">    <span class="built_in">return</span> left;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 排序算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/public/2020/07/09/hello-world/"/>
      <url>/public/2020/07/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>欢迎来到<a href="https://github.com/wyy-class" target="_blank" rel="noopener">wyy</a>的博客，希望我们能够一起学习，一起进步，加油！</p><p> <img src="http://image.baidu.com/search/detail?ct=503316480&z=undefined&tn=baiduimagedetail&ipn=d&word=%E6%AC%A2%E8%BF%8E%E5%85%89%E4%B8%B4&step_word=&ie=utf-8&in=&cl=2&lm=-1&st=undefined&hd=undefined&latest=undefined&copyright=undefined&cs=2145487995,3918592888&os=1648436880,3907292794&simid=3475138804,306584137&pn=0&rn=1&di=66880&ln=1722&fr=&fmq=1594284688051_R&fm=&ic=undefined&s=undefined&se=&sme=&tab=0&width=undefined&height=undefined&face=undefined&is=0,0&istype=0&ist=&jit=&bdtype=0&spn=0&pi=0&gsm=0&objurl=http%3A%2F%2Fimg11.360buyimg.com%2Fn1%2Fjfs%2Ft22426%2F97%2F302475165%2F80608%2Fcd922a1d%2F5b0901a8N7dde8812.jpg&rpstart=0&rpnum=0&adpicid=0&force=undefined" alt="欢迎"></p><h3 id="说明：博主能力现在有限，博客的其他功能正在一步步完善中"><a href="#说明：博主能力现在有限，博客的其他功能正在一步步完善中" class="headerlink" title="说明：博主能力现在有限，博客的其他功能正在一步步完善中"></a>说明：博主能力现在有限，博客的其他功能正在一步步完善中</h3><p>有什么问题或好的想法可以到GitHub留言:</p><p><a href="https://github.com/wyy-class/public" target="_blank" rel="noopener">https://github.com/wyy-class/public</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
